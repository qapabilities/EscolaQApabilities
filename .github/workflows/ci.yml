name: 🔧 CI - Build e Testes

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_PATH: './EscolaQApabilities.sln'

jobs:
  build-and-test:
    name: 🏗️ Build e Testes
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: 🔄 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: 🏗️ Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release
      
    - name: 🧪 Run unit tests
      run: |
        dotnet test ${{ env.SOLUTION_PATH }} \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage
          
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        fail_ci_if_error: false
        verbose: true

  code-quality:
    name: 🔍 Qualidade do Código
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: ⚙️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 🔄 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: 🔍 Run code analysis
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --verbosity normal \
          /p:TreatWarningsAsErrors=true \
          /p:WarningsAsErrors="" \
          /p:WarningsNotAsErrors="CS1591"

  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🛡️ Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-status:
    name: ✅ Build Status
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-scan]
    if: always()
    
    steps:
    - name: ✅ Build Success
      if: ${{ needs.build-and-test.result == 'success' && needs.code-quality.result == 'success' && needs.security-scan.result == 'success' }}
      run: |
        echo "🎉 Build completed successfully!"
        echo "✅ All checks passed"
        
    - name: ❌ Build Failed
      if: ${{ needs.build-and-test.result == 'failure' || needs.code-quality.result == 'failure' || needs.security-scan.result == 'failure' }}
      run: |
        echo "❌ Build failed!"
        echo "🔍 Check the logs above for details"
        exit 1
