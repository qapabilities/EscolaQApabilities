# 🔍 PR Checks - Pull Request Validation
# Escola QApabilities - Student Service
# 
# Triggers: Pull Requests
# Jobs: Build validation, Docker build test, Auto-comments

name: PR Checks - Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

# Permissões necessárias para o workflow
permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: 'EscolaQApabilities.StudentService.sln'

jobs:
  # ============================================================================
  # JOB 1: PR VALIDATION
  # ============================================================================
  pr-validation:
    name: 🔍 PR Validation
    runs-on: ubuntu-latest
    
    steps:
    # Checkout do código
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Para comparar com branch base
        token: ${{ secrets.GITHUB_TOKEN }}
        
    # Setup .NET 8
    - name: 🔧 Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    # Cache de pacotes NuGet
    - name: 📦 Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    # Restore dependencies
    - name: 📦 Restore Dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    # Build da aplicação
    - name: 🏗️ Build Application
      run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release
      
    # Executar testes unitários
    - name: 🧪 Run Unit Tests
      run: |
        dotnet test ${{ env.SOLUTION_FILE }} \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          --logger "trx;LogFileName=test-results.trx"
          
    # Análise de arquivos alterados
    - name: 📋 Analyze Changed Files  
      id: changed-files
      uses: tj-actions/changed-files@v44
      with:
        files: |
          **/*.cs
          **/*.yml
          **/*.yaml
          **/Dockerfile*
          **/docker-compose*
          **/*.json
          
    - name: 📊 Generate PR Summary
      run: |
        echo "## 📋 Arquivos Alterados no PR" > pr-summary.md
        echo "" >> pr-summary.md
        echo "| Tipo | Quantidade |" >> pr-summary.md
        echo "|------|------------|" >> pr-summary.md
        echo "| 📁 Total de Arquivos | ${{ steps.changed-files.outputs.all_changed_files_count }} |" >> pr-summary.md
        echo "" >> pr-summary.md
        
        if [ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]; then
          echo "### 📝 Arquivos Modificados:" >> pr-summary.md
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "- $file" >> pr-summary.md
          done
          echo "" >> pr-summary.md
        else
          echo "Nenhum arquivo relevante foi alterado." >> pr-summary.md
        fi

  # ============================================================================
  # JOB 2: DOCKER BUILD TEST
  # ============================================================================
  docker-build-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: pr-validation
    if: always() && needs.pr-validation.result == 'success'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    # Test build da imagem Docker
    - name: 🐳 Test Docker Build
      run: |
        echo "🐳 Testando build da imagem Docker..."
        docker build -t escola-student-service:pr-test .
        
        echo "✅ Docker build executado com sucesso!"
        
        # Verificar tamanho da imagem
        IMAGE_SIZE=$(docker images escola-student-service:pr-test --format "table {{.Size}}" | tail -n 1)
        echo "📦 Tamanho da imagem: $IMAGE_SIZE"
        
        # Adicionar ao summary
        echo "### 🐳 Docker Build Results" >> pr-summary.md
        echo "- ✅ Build: Successful" >> pr-summary.md
        echo "- 📦 Image Size: $IMAGE_SIZE" >> pr-summary.md
        echo "" >> pr-summary.md
        
    # Test básico do container
    - name: 🧪 Test Container Startup
      run: |
        echo "🧪 Testando inicialização do container..."
        
        # Configurar variáveis mínimas para teste
        docker run -d \
          --name test-container \
          -e ASPNETCORE_ENVIRONMENT=Development \
          -e USE_SQLITE=true \
          -e STUDENT_DB_CONNECTION_STRING="Data Source=/tmp/test.db" \
          -e JWT_KEY="test-key-for-pr-validation-32-chars-minimum" \
          -p 8080:8080 \
          escola-student-service:pr-test
          
        # Aguardar container inicializar
        sleep 30
        
        # Verificar se container está rodando
        if docker ps | grep test-container; then
          echo "✅ Container iniciado com sucesso!"
          
          # Verificar logs
          echo "📋 Logs do container:"
          docker logs test-container --tail 10
          
        else
          echo "❌ Container falhou ao iniciar"
          docker logs test-container
          exit 1
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  # ============================================================================
  # JOB 3: SECURITY SCAN (se Dockerfile alterado)
  # ============================================================================
  security-scan:
    name: 🔍 Security Scan
    runs-on: ubuntu-latest
    needs: docker-build-test
    if: always() && needs.docker-build-test.result == 'success'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Build Image for Scan
      run: docker build -t escola-student-service:security-scan .
      
    # Security scan com Trivy
    - name: 🔍 Run Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'escola-student-service:security-scan'
        format: 'table'
        output: 'trivy-results.txt'
        
    - name: 📋 Security Summary
      run: |
        echo "### 🔍 Security Scan Results" >> pr-summary.md
        echo "\`\`\`" >> pr-summary.md
        head -20 trivy-results.txt >> pr-summary.md
        echo "\`\`\`" >> pr-summary.md
        echo "" >> pr-summary.md

  # ============================================================================
  # JOB 4: AUTO COMMENT NO PR
  # ============================================================================
  pr-comment:
    name: 💬 Auto Comment
    runs-on: ubuntu-latest
    needs: [pr-validation, docker-build-test]
    if: always()
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    # Gerar comentário automático
    - name: 📝 Generate PR Comment
      run: |
        echo "# 🤖 PR Validation Results" > pr-comment.md
        echo "" >> pr-comment.md
        echo "**PR:** #${{ github.event.number }}" >> pr-comment.md
        echo "**Branch:** \`${{ github.head_ref }}\` → \`${{ github.base_ref }}\`" >> pr-comment.md
        echo "**Author:** @${{ github.event.pull_request.user.login }}" >> pr-comment.md
        echo "" >> pr-comment.md
        
        # Status dos jobs
        echo "## 🎯 Validation Status" >> pr-comment.md
        echo "" >> pr-comment.md
        
        if [ "${{ needs.pr-validation.result }}" = "success" ]; then
          echo "- ✅ **Build & Tests**: Passed" >> pr-comment.md
        else
          echo "- ❌ **Build & Tests**: Failed" >> pr-comment.md
        fi
        
        if [ "${{ needs.docker-build-test.result }}" = "success" ]; then
          echo "- ✅ **Docker Build**: Passed" >> pr-comment.md
        elif [ "${{ needs.docker-build-test.result }}" = "skipped" ]; then
          echo "- ⏭️ **Docker Build**: Skipped (no Docker changes)" >> pr-comment.md
        else
          echo "- ❌ **Docker Build**: Failed" >> pr-comment.md
        fi
        
        echo "" >> pr-comment.md
        
        # Adicionar summary se existir
        if [ -f pr-summary.md ]; then
          cat pr-summary.md >> pr-comment.md
        fi
        
        # Próximos passos
        echo "## 🚀 Next Steps" >> pr-comment.md
        echo "" >> pr-comment.md
        
        if [ "${{ needs.pr-validation.result }}" = "success" ]; then
          echo "✅ PR está pronto para review!" >> pr-comment.md
          echo "" >> pr-comment.md
          echo "Após aprovação e merge para \`main\`, será executado:" >> pr-comment.md
          echo "- 🏗️ CI Pipeline completa" >> pr-comment.md  
          echo "- 🚀 Deploy automático para AKS" >> pr-comment.md
          echo "- 🏥 Health checks pós-deploy" >> pr-comment.md
        else
          echo "❌ Corrija os problemas encontrados antes do merge." >> pr-comment.md
        fi
        
        echo "" >> pr-comment.md
        echo "---" >> pr-comment.md
        echo "*🤖 Comentário gerado automaticamente pela pipeline de CI/CD*" >> pr-comment.md
        
    # Postar comentário no PR
    - name: 💬 Comment PR
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const comment = fs.readFileSync('pr-comment.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # ============================================================================
  # JOB 5: PR SUMMARY
  # ============================================================================
  pr-success:
    name: ✅ PR Checks Complete
    runs-on: ubuntu-latest
    needs: [pr-validation, docker-build-test, pr-comment]
    if: success()
    
    steps:
    - name: 🎉 PR Validation Success
      run: |
        echo "🎉 PR VALIDATION CONCLUÍDA COM SUCESSO!"
        echo ""
        echo "✅ Build: OK"
        echo "✅ Tests: OK"
        echo "✅ Docker Build: OK"
        echo "✅ Auto Comment: OK"
        echo ""
        echo "🚀 PR está pronto para review e merge!"