apiVersion: v1
kind: Namespace
metadata:
  name: escola-qapabilities
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: student-service-config
  namespace: escola-qapabilities
data:
  ASPNETCORE_ENVIRONMENT: "Development"
  ASPNETCORE_URLS: "http://+:8080"
  USE_SQLITE: "true"
  JWT_ISSUER: "EscolaQApabilities"
  JWT_AUDIENCE: "EscolaQApabilitiesAPI"
  JWT_EXPIRY_MINUTES: "60"
  SECURITY_CORS_ORIGINS: "http://localhost:3000,http://localhost:4200,http://localhost:8080"
  SECURITY_RATE_LIMIT_REQUESTS: "100"
  SECURITY_RATE_LIMIT_WINDOW_MINUTES: "1"
  DATABASE_COLLATION: "SQL_Latin1_General_CP1_CI_AS"
---
apiVersion: v1
kind: Secret
metadata:
  name: student-service-secret
  namespace: escola-qapabilities
type: Opaque
stringData:
  STUDENT_DB_CONNECTION_STRING: "Data Source=/tmp/escola.db"
  JWT_KEY: "escola-qapabilities-super-secret-jwt-key-for-development-only-32-chars-minimum"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: student-service
  namespace: escola-qapabilities
  labels:
    app: student-service
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: student-service
  template:
    metadata:
      labels:
        app: student-service
        version: v1
    spec:
      containers:
      - name: student-service
        image: escola-student-service:latest
        imagePullPolicy: Never  # Usar imagem local, não fazer pull
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: ASPNETCORE_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: student-service-config
              key: ASPNETCORE_ENVIRONMENT
        - name: ASPNETCORE_URLS
          valueFrom:
            configMapKeyRef:
              name: student-service-config
              key: ASPNETCORE_URLS
        - name: USE_SQLITE
          valueFrom:
            configMapKeyRef:
              name: student-service-config
              key: USE_SQLITE
        - name: STUDENT_DB_CONNECTION_STRING
          valueFrom:
            secretKeyRef:
              name: student-service-secret
              key: STUDENT_DB_CONNECTION_STRING
        - name: JWT_KEY
          valueFrom:
            secretKeyRef:
              name: student-service-secret
              key: JWT_KEY
        - name: JWT_ISSUER
          valueFrom:
            configMapKeyRef:
              name: student-service-config
              key: JWT_ISSUER
        - name: JWT_AUDIENCE
          valueFrom:
            configMapKeyRef:
              name: student-service-config
              key: JWT_AUDIENCE
        - name: JWT_EXPIRY_MINUTES
          valueFrom:
            configMapKeyRef:
              name: student-service-config
              key: JWT_EXPIRY_MINUTES
        - name: SECURITY_CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: student-service-config
              key: SECURITY_CORS_ORIGINS
        - name: SECURITY_RATE_LIMIT_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: student-service-config
              key: SECURITY_RATE_LIMIT_REQUESTS
        - name: SECURITY_RATE_LIMIT_WINDOW_MINUTES
          valueFrom:
            configMapKeyRef:
              name: student-service-config
              key: SECURITY_RATE_LIMIT_WINDOW_MINUTES
        - name: DATABASE_COLLATION
          valueFrom:
            configMapKeyRef:
              name: student-service-config
              key: DATABASE_COLLATION
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: student-service
  namespace: escola-qapabilities
  labels:
    app: student-service
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  selector:
    app: student-service
---
# Para ambiente local, vamos usar NodePort ao invés de LoadBalancer
apiVersion: v1
kind: Service
metadata:
  name: student-service-nodeport
  namespace: escola-qapabilities
  labels:
    app: student-service
spec:
  type: NodePort
  ports:
  - name: http
    port: 80
    targetPort: 8080
    nodePort: 30080
    protocol: TCP
  selector:
    app: student-service

